$FPSX 
COMPILER gcl

		static final boolean DIRECT = CodegenConstants.DIRECT;
		static final boolean INDIRECT = CodegenConstants.INDIRECT;
		IntegerType integerType = SemanticActions.INTEGER_TYPE;
		BooleanType booleanType = SemanticActions.BOOLEAN_TYPE;
		TypeDescriptor noType = SemanticActions.NO_TYPE;

/*==========================================================*/
CHARACTERS 
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789". 
  eol = '\r'.
  nl = '\n'.
  tab = '\t'.
  underscore = "_".
  legalSingleQuote = ANY - "\r\n'".
  legalDoubleQuote = ANY - "\r\n\"".
TOKENS
  identifier  = letter {letter | digit | underscore }.
  numeral = digit {digit}.
  string = "'"{legalSingleQuote}"'" | '"'{legalDoubleQuote}'"'.
PRAGMAS 
	option1 = "$"("c"|"C")("+"|"-").
		(. CompilerOptions.listCode = la.val.charAt(2) == '+'; .)
	option3 = "$"("o"|"O")("+"|"-").
		(. CompilerOptions.optimize = la.val.charAt(2) == '+'; .)
	option5 = "$"("s"|"S")"+". (. SymbolTable.dumpAll(); .)
	option6 = "$"("s"|"S")"-".  /* ignore */
	option7 = "$"("m"|"M")("+"|"-").
		(. CompilerOptions.showMessages = la.val.charAt(2) == '+'; .)
	option9 = "$"("r"|"R")"+". (. CompilerOptions.printAllocatedRegisters(); .)
	option10 = "$"("r"|"R")"-".  /* ignore */

COMMENTS FROM "{" TO "}" NESTED
COMMENTS FROM "--" TO eol

IGNORE eol + tab + nl

/*==========================================================*/
PRODUCTIONS

gcl
=
	(. semantic.startCode();  SymbolTable scope = SymbolTable.currentScope(); .)
	SYNC module<scope> 
	{ (. scope = scope.openScope(true); .) SYNC module<scope> } 
	(. semantic.finishCode(); .) .
/*----------------------------------------------------------*/
module<SymbolTable scope> 
=
	"module" identifier (. Module module = semantic.declareModule(scope, new Identifier(currentToken().spelling())); .)
		definitionPart<scope> (. semantic.endModuleDefinitionPart(module); .)
	["private" (.scope = scope.openScope(false);.) block<scope>]	
	"." .
/*----------------------------------------------------------*/
block<SymbolTable scope>
=
     definitionPart<scope> SYNC "begin"  statementPart<scope> "end".
/*----------------------------------------------------------*/
definitionPart<SymbolTable scope>   =    {SYNC definition<scope> WEAK ";" }.
/*----------------------------------------------------------*/
statementPart<SymbolTable scope> 
= 
	SYNC statement<scope> WEAK ";" { SYNC statement<scope> WEAK ";"}.
/*----------------------------------------------------------*/
definition<SymbolTable scope>  
	(. TypeDescriptor type =null; Identifier id =null; Expression expression =null; SemanticItem result = null;.)
=  
	//check the level->paramkind
	variableDefinition<scope, ParameterKind.NOT_A_PARAMETER> 
	|
	"constant" identifier (. id = new Identifier(currentToken().spelling());.) 
		"=" expression<^expression, scope>
		(.semantic.declareConstant(scope, id, expression); .) 
	|
	"typedefinition" type<^type,scope> identifier (. 
		id = new Identifier(currentToken().spelling());
		semantic.declareType(scope, id, type); .) 
	|
	"procedure" identifier 
		(. id = new Identifier(currentToken().spelling());
		   SemanticItem containingSemanticItem = scope.lookupIdentifier(id).semanticRecord();
		.) 
	"@" identifier 
		(.	id = new Identifier(currentToken().spelling());
			Procedure procedure = semantic.startProcedureDefinition(id, containingSemanticItem);
		.)
		block<procedure.scope()>
		(.	semantic.endProcedureDefinition(procedure);
		.)
.

/*----------------------------------------------------------*/
variableDefinition<SymbolTable scope, ParameterKind kindOfParam> 
	(. TypeDescriptor type; Identifier id; .)
=
	type<^type, scope> identifier
		(. 	id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	{	"," identifier
		(.id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	}.
/*----------------------------------------------------------*/
type<^TypeDescriptor result, SymbolTable scope>	(. result = noType;.)
=
	typeSymbol<^result, scope> 
	  [rangeType<^result, result, scope>
	  |arrayType<^result,result, scope>]
	  |tupleType<^result, scope>
	.
/*----------------------------------------------------------*/
typeSymbol<^TypeDescriptor result, SymbolTable scope> (. result = noType; SemanticItem item=null;.)
=
	"integer" (. result = integerType; .)
	| "Boolean" (. result = booleanType; .)
	| qualifiedIdentifier<^item, scope>(. result = item.expectTypeDescriptor(GCLCompiler.err); .).
/*----------------------------------------------------------*/
tupleType<^TupleType result, SymbolTable scope>
=
	//TODO: worry about levels, scopes, 
	(. TupleCarrier carrier = new TupleCarrier(); .)
	"tuple" "[" (procedures<carrier, scope> | fieldsAndProcedures<carrier, scope>) "]"
	// "procedure" identifier (.startProcedureDefinition.)"(" { procedureParameter<carrier> } ")"(.endProcedureDefinition.)
     (. result = new TupleType(carrier); .)
.
//procedureParameter<^carrier, carrier>
	//"value" | "reference" variableDefinition yadda declareVariable
//.
fieldsAndProcedures<TupleCarrier carrier, SymbolTable scope>
	 (. TypeDescriptor type; Identifier id;.)
=
	typeSymbol<^type, scope> identifier 
	(.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)
	[moreFieldsAndProcedures<carrier, scope>]
.

moreFieldsAndProcedures<TupleCarrier carrier, SymbolTable scope>
	 (. TypeDescriptor type; Identifier id;.)
=
	("," typeSymbol<^type, scope> identifier 
	(.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)
	moreFieldsAndProcedures<carrier, scope>
	|
	procedures<carrier, scope>
	)
.

procedures<TupleCarrier carrier, SymbolTable scope>
=
	procedureDeclaration<carrier, scope> {"," procedureDeclaration<carrier, scope>}
.

procedureDeclaration<TupleCarrier carrier, SymbolTable scope>
	(. Procedure procedure = null;.)
=
	"procedure" identifier 
	(.	Identifier id = new Identifier(currentToken().spelling());
		procedure = semantic.startProcedureDeclaration(scope, id); .) 
	parameterList<procedure>
	(. semantic.endProcedureDeclaration(); carrier.enterProcedure(procedure, id); .)
.

parameterList<Procedure procedure>
=
	"(" [ parameterDefinition<procedure> {  ";" parameterDefinition<procedure> } ] ")" 
.

parameterDefinition<Procedure procedure>
=
	("reference" variableDefinition<procedure.scope(), ParameterKind.REFERENCE_PARAMETER>)
	|
	( "value" variableDefinition<procedure.scope(), ParameterKind.VALUE_PARAMETER>)
.
/*----------------------------------------------------------*/
rangeType<^TypeDescriptor result,TypeDescriptor baseType, SymbolTable scope> (.Expression lbound = null; Expression ubound=null;.)
=
"range" "[" expression<^lbound, scope> ".." expression<^ubound, scope> "]" 
									(. result = semantic.createRange(baseType, lbound, ubound);.)  
.
/*----------------------------------------------------------*/
arrayType<^TypeDescriptor result, TypeDescriptor baseType, SymbolTable scope>
		(.TypeDescriptor range = null; result = noType; 
		ArrayCarrier carrier = new ArrayCarrier(baseType); .)
=
"array" "[" typeSymbol<^range, scope>"]" (.carrier.push(range);.) {"[" typeSymbol<^range, scope>"]"(.carrier.push(range);.)}
(.result = carrier.buildType();.)
.
/*----------------------------------------------------------*/
//TODO: refactor assignStatement into both assignments and method invocations
//then we should have pt 14
statement<SymbolTable scope>
=
	emptyStatement | readStatement<scope>  | writeStatement<scope> 
	| assignStatement<scope> | ifStatement<scope> | doStatement<scope> | forStatement<scope> .
/*----------------------------------------------------------*/
emptyStatement     = "skip".
/*----------------------------------------------------------*/
readStatement<SymbolTable scope>      (. Expression exp; .)
=
	"read" variableAccess<^exp, scope>  (. semantic.readVariable(exp); .)
		{ ","  variableAccess<^exp, scope>  (. semantic.readVariable(exp); .) } .
/*----------------------------------------------------------*/
writeStatement<SymbolTable scope>   
=
	"write" writeItem<scope>
		{  "," writeItem<scope> }
		(. semantic.genEol(); .).
/*----------------------------------------------------------*/
writeItem<SymbolTable scope>(. Expression exp; .)
=
	expression<^exp, scope>  (. semantic.writeExpression(exp); .)
	| string (. semantic.writeString(currentToken().spelling()); .) .
 
/*----------------------------------------------------------*/
assignStatement<SymbolTable scope>
		(. AssignRecord expressions = new AssignRecord(); Expression exp; .)
=
	variableAccess<^exp, scope> (. expressions.left(exp); .)
		{ "," variableAccess<^exp, scope> (. expressions.left(exp); .) }
		":="
		expression<^exp, scope> (. expressions.right(exp); .)
		{ "," expression<^exp, scope> (. expressions.right(exp); .) }
		(. semantic.parallelAssign(expressions); .).
/*----------------------------------------------------------*/
forStatement<SymbolTable scope> (. GCRecord forallRecord; Expression control;  .)
=
	"forall" variableAccess<^control, scope> "->" (. forallRecord = semantic.beginFor(control); .)
		statementPart<scope>
	"llarof"(. semantic.endFor(control, forallRecord); .).
/*----------------------------------------------------------*/
ifStatement<SymbolTable scope>  (. GCRecord ifRecord; .)
=
	"if" (. ifRecord = semantic.startIf(); .)  guardedCommandList<scope, ifRecord > 
	"fi" (. semantic.endIf(ifRecord); .).
/*----------------------------------------------------------*/
doStatement<SymbolTable scope>  (. GCRecord doRecord; .)
=
	"do" (. doRecord = semantic.startDo(); .)  guardedCommandList<scope, doRecord > 
	"od" (. semantic.endDo(doRecord); .).
/*----------------------------------------------------------*/
guardedCommandList<SymbolTable scope, GCRecord record>
=
	guardedCommand<scope, record> { "[]" guardedCommand<scope, record> }.
/*----------------------------------------------------------*/
guardedCommand<SymbolTable scope, GCRecord  record >  (.  Expression expr; .)
=
	expression<^expr, scope> (. semantic.ifTest(expr, record); .)  "->"
	statementPart<scope>  (. semantic.elseIf(record); .).
/*----------------------------------------------------------*/
expression<^Expression left, SymbolTable scope>
	(. Expression right; .)
=
	andExpr<^left, scope> {"|" andExpr<^right, scope>  (.left = semantic.evaluateBinaryOperator(left,LogicalOperator.OR,right);.)}.
/*----------------------------------------------------------*/
andExpr<^Expression left, SymbolTable scope>
	(. Expression right; .)
=
	relationalExpr<^left, scope> {"&" relationalExpr<^right, scope> (.left = semantic.evaluateBinaryOperator(left, LogicalOperator.AND,right);.)}.
/*----------------------------------------------------------*/
relationalExpr<^Expression left, SymbolTable scope>
	(. Expression right; RelationalOperator op; .)
=
	simpleExpr<^left, scope>
		[ relationalOperator<^op>   simpleExpr<^right, scope>
		(. left = semantic.evaluateBinaryOperator(left, op, right); .)
		].
/*----------------------------------------------------------*/
simpleExpr<^Expression left, SymbolTable scope>
	(. Expression right; AddOperator op; left = null; .)
=
	(	["+"]term<^ left, scope>
		|  "-" term<^ left, scope>  
					(. left = semantic.evaluateUnaryOperator(left, UnaryOperator.NEG); .)
	)
	{  	addOperator<^op>  term<^right, scope>
			(. left = semantic.evaluateBinaryOperator(left, op, right); .)
	}.
/*----------------------------------------------------------*/
term<^Expression left, SymbolTable scope>
	(. Expression right; MultiplyOperator op; .)
=
	factor<^ left, scope> { multiplyOperator<^op>  factor<^right, scope>
	(. left = semantic.evaluateBinaryOperator(left, op, right); .)}.
/*----------------------------------------------------------*/
factor<^Expression result, SymbolTable scope>  (. result = null; .)
=
	   variableAccess<^result, scope>
	|  numeral
	  (. result = new ConstantExpression (integerType, Integer.parseInt(currentToken().spelling()));
	  .)
	| "(" expression<^result, scope> ")"
	| "true"  (. result = new ConstantExpression(booleanType, 1); .)
	| "false" (. result = new ConstantExpression(booleanType, 0); .)
	| "~" factor<^result, scope> (. result = semantic.evaluateUnaryOperator(result, UnaryOperator.NOT);.)
	| (. Expression exp;
		 ExpressionList tupleFields = new ExpressionList();
	  .)
		"[" expression<^exp, scope>
			(. tupleFields.enter(exp); .)
		 { "," expression<^exp, scope>
		 	(. tupleFields.enter(exp); .)
		 }
		"]"  (. result = semantic.buildTuple(tupleFields); .).
/*----------------------------------------------------------*/
relationalOperator<^RelationalOperator op>  (. op = null; .)
=
	"="  (. op = RelationalOperator.EQUAL; .)
	| "#" (. op = RelationalOperator.NOT_EQUAL; .)
	| "<" (. op = RelationalOperator.LESS_THAN; .)
	| ">" (. op = RelationalOperator.GREATER_THAN; .)
	| "<=" (. op = RelationalOperator.LT_EQUAL; .)
	| ">=" (. op = RelationalOperator.GT_EQUAL; .).
/*----------------------------------------------------------*/
addOperator<^AddOperator op > (. op = null; .)
 =
 	"+"  (. op = AddOperator.PLUS; .)
 	| "-" (. op = AddOperator.MINUS; .).
/*----------------------------------------------------------*/
multiplyOperator<^MultiplyOperator op > 	(. op = null; .)
=
	"*"   (. op = MultiplyOperator.TIMES; .)
	| "/"  (. op = MultiplyOperator.DIVIDE; .)
	| "\\"  (. op = MultiplyOperator.MODULUS; .).
/*----------------------------------------------------------*/
qualifiedIdentifier<^SemanticItem result, SymbolTable scope> 
=
identifier (. Identifier id = new Identifier(currentToken().spelling()); 
			result = semantic.semanticValue(scope, id); .) 
	["." identifier (. Identifier newId = new Identifier(currentToken().spelling());
						result = semantic.semanticValue(scope, newId, result); .)].
/*----------------------------------------------------------*/
variableAccess<^Expression result, SymbolTable scope>  
      (. SemanticItem workValue; .)   
=
qualifiedIdentifier<^workValue, scope> (. result = workValue.expectExpression(err); .) 
	[{subscriptsAndComponents<^result, scope, result>}].

/*----------------------------------------------------------*/
subscriptsAndComponents<^Expression result, SymbolTable scope, Expression workValue>
	(. Identifier id; result = null;.)
=
  "@" identifier (. id = new Identifier(currentToken().spelling()); result = semantic.extractTupleField(workValue, id);.)
  | "[" expression<^result, scope> "]" (. result = semantic.extractArrayElement(workValue, result); .)
.
END gcl.